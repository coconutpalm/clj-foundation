(ns clj-foundation.db-test
  (:require [clojure.test :refer :all]
            [clojure.java.io :as io]
            [clojure.string :as str]
            [schema.core :as s :refer [=> =>*]]
            [clj-foundation.unit-test-common :as common]
            [clj-foundation.patterns :as p :refer [def-singleton-fn f]]
            [clj-foundation.db :refer :all]
            [clj-foundation.millis :as millis]
            [clojure.java.jdbc :as jdbc]))


(common/register-fixtures)


(defquery find-animal "select ${select-columns} from test_data where ${where-column}=${where-val};"
  ABORT?-FN (constantly true))


(deftest database-access

  (testing "dbconfig mechanism"
    (dbconfig-override DB-SPEC
                       {:classname   "org.h2.Driver"
                        :subprotocol "h2:mem"
                        :subname     "demo;DB_CLOSE_DELAY=-1"
                        :user        "sa"
                        :password    ""})

    (is (= "sa" (dbconfig {} DB-SPEC :user)))

    (is (= :nothingness-and-emptiness (dbconfig {DB-SPEC :nothingness-and-emptiness} DB-SPEC))))

  (testing "Create table"
    (jdbc/db-do-commands
     (dbconfig {} DB-SPEC)
     "drop table if exists test_data;")

    (jdbc/db-do-commands
     (dbconfig {} DB-SPEC)
     (jdbc/create-table-ddl
      :test_data
      [[:id "INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 100, INCREMENT BY 1) PRIMARY KEY"]
       [:name "VARCHAR(200)"]
       [:sound "VARCHAR(40)"]])))

  (testing "Insert rows"
    (jdbc/insert-multi!
     (dbconfig {} DB-SPEC)
     :test_data
     [{:name "Rabbit"
       :sound "Awwww! What's up, Doc?"}
      {:name "Pig"
       :sound "Oink"}
      {:name "Cow"
       :sound "Moo"}
      {:name "Dog"
       :sound "RRRRuuuuff"}]))


  (testing "simple prepare with configuration set using dbconfig-override."
    (jdbc/with-db-connection [conn (dbconfig {} DB-SPEC)]
      (dbconfig-override SQL-FN jdbc/query CONNECTION conn ABORT?-FN (constantly true))

      (let [make-sound (prepare "select sound from test_data where name='Pig';")
            result     (make-sound ::row-fn :sound)]

        (is (= "Oink" (first result)))
        (is (= 1 (count result))))))


  (testing "Prepare with both templates and bind variables; configuration set using parameters"
    (jdbc/with-db-connection [conn (dbconfig {} DB-SPEC)]

      (let [make-sound (prepare "select ${column} from test_data where name=${animal};"
                                SQL-FN jdbc/query CONNECTION conn ABORT?-FN (constantly true)
                                :column "sound" ::row-fn :sound)]

        (is (= "Moo"                    (first (make-sound :animal "Cow"))))
        (is (= "Awwww! What's up, Doc?" (first (make-sound :animal "Rabbit"))))
        (is (= "RRRRuuuuff"             (first (make-sound :animal "Dog")))))))


  (testing "defquery substitutes variables correctly"
    (jdbc/with-db-connection [conn (dbconfig {} DB-SPEC)]
      (is (= {:name "Cow" :sound "Moo"}
             (first (find-animal CONNECTION conn
                                 :select-columns "name,sound"
                                 :where-column "sound"
                                 :where-val "'Moo'")))))))



(run-tests)
