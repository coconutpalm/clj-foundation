(ns clj-foundation.config
  (:require [clojure.string :as str]
            [schema.core :as s :refer [=> =>* defschema]]
            [clj-foundation.templates :as template]
            [clj-foundation.io :as io])
  (:gen-class))


(def config-file-resource {:CONFIG_FILE_LOCATION "config.edn"})



(defn- find-config-file [config-file-envar default-config-resource]

  (let [config-envar-name (str "${" config-file-envar "}")
        substitution-map {(keyword config-file-envar) default-config-resource}
        config-file-location (template/subst<- config-envar-name substitution-map)]

    (if (= default-config-resource config-file-location)
      {:resource config-file-location}
      {:file config-file-location})))


(defn- def-config-fn
  "Defines an anonymous function that returns configuration values from a file specified
  in config-file-envar, or a compiled default-config-resource if the variable config-file-envar
  is not in either the Java system properties or the operating system environment."
  [config-file-envar default-config-resource]

  (let [file-location (find-config-file config-file-envar default-config-resource)
        settings-file (s/fn :- s/Str [file-location :- io/FileLocation]
                        (io/read-file-at-location file-location))]

    (s/fn :- s/Any
      [& keys :- [s/Keyword]]
      (try
        (let [result (reduce (fn [collection key] (collection key)) (settings-file) keys)]
          (if (nil? result)
            (throw (IllegalStateException. (str "Error finding config: " keys " from file: " file-location)))
            result))
        (catch NullPointerException e
          (throw (IllegalStateException. (str "Error finding config: " keys " from file: " file-location))))))))


(defmacro defconfig
  "Defines a configuration lookup function of type (=> s/Any [s/Keyword]) that returns configuration
  values from the EDN file specified by variable or the default resource.  File resolution is done
  in the following precidence:

  * A Java system variable with its name matching config-file-location-envar.
  * An operating system environment variable with its name matching config-file-location-envar.
  * A Java resource with a relative path specified by default-config-resource.

  The configuration file itself should represent a single Clojure map with keywords as the keys and
  any value (including another map) as the value.  Thus calling a config function generated by
  defconfig might look like:

  (config :topic :subtopic :entry-name)"

  [name config-file-location-envar default-config-resource]
  `(def ~name (def-config-fn ~config-file-location-envar ~default-config-resource)))
